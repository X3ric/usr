#!/bin/zsh -i
# Minimal IP and port scanner
ipport() { # port scanner
    local ip="$1"
    local port_range="$2"
    if [[ ! $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "Usage: iport <ip> <port-range>  -q to make it silent" | color magenta
        echo "Example: iport 192.168.1.1 1-100" | color cyan
        return 1
    fi
    if [[ -z $port_range ]]; then
        port_range="1-1000"
    fi
    declare -A port_protocol
    port_protocol[80]="HTTP"
    port_protocol[443]="HTTPS"
    port_protocol[22]="SSH"
    port_protocol[21]="FTP"
    counter=0
    for port in $(seq $(echo "$port_range" | cut -d'-' -f 1) $(echo "$port_range" | cut -d'-' -f 2)); do
        {
            if timeout 1 bash -c "echo >/dev/tcp/$ip/$port" &>/dev/null; then
                protocol="${port_protocol[$port]}"
                if [[ -z $protocol ]]; then
                    protocol="Unknown"
                fi
                if [[ ! -z $3 && $3 == "-q" ]]; then
                    echo "$port"
                else
                    echo "$ip Port $port [$protocol] is open http://$ip:$port" | color 33
                fi
            fi
            ((counter++))
        } 2>&1 &!
    done 
    wait
}
if [[ ! $1 =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}-[0-9]{1,3}$ ]]; then
    echo "Usage: ipscanner <subnet.start-end> <port-start.end>" | color magenta
    echo "Example: ipscanner 192.168.1.1-255 1-100" | color cyan
    return 1
fi
local subnet=$(echo $1 | cut -d '-' -f 1 | cut -d '.' -f 1-3)
local start_ip=$(echo $1 | cut -d '.' -f 4 | cut -d '-' -f 1)
local end_ip=$(echo $1 | cut -d '-' -f 2)
local full_ip
local ports
local counter
local temp_file=$(mktemp)
if [[ ! -z $2 ]]; then
    echo "Started scanning from $subnet.$start_ip to $subnet.$end_ip from port $(echo "$2" | cut -d'-' -f 1) to $(echo "$2" | cut -d'-' -f 2)." | color 35
    echo "IP Address    :           Ports           :            Hostname             :        Mac         :  Corporation  :          Manufacturer" | color 31
else
    echo "Started scanning from $subnet.$start_ip to $subnet.$end_ip" | color 35
    echo "IP Address    :            Hostname             :        Mac         :  Corporation  :          Manufacturer" | color 31
fi
counter=0
wget -O "/tmp/oui-tmp.txt" https://www.wireshark.org/download/automated/data/manuf &> /dev/null
for ip in $(seq $start_ip $end_ip); do
    full_ip="$subnet.$ip"
    ((counter++))
    {
        if ping -c 1 -W 1 $full_ip &> /dev/null; then
            hostname=$(getent hosts $full_ip 2>/dev/null | awk '{print $2}' | head -n 1)
            mac=$(ip neigh 2>/dev/null | grep "$full_ip" | awk '{print $5}' | tr '[:lower:]' '[:upper:]')
            oui_prefix=$(echo "${mac:0:8}")
            corporation=$(cat "/tmp/oui-tmp.txt" | grep -i "^$oui_prefix" | awk -F '\t' '{print $2}')
            manufacturer=$(cat "/tmp/oui-tmp.txt" | grep -i "^$oui_prefix" | awk -F '\t' '{print $3}')
            if [[ ! -z $2 ]]; then
                ports=$(ipport "$full_ip" $2 -q | tr '\n' ',' 2>&1)
                printf "%-13s : %-25s : %-31s : %-18s : %-13s : %-30s \n" "${full_ip:-'N/A'}" "${ports:-'N/A'}" "${hostname:-'N/A'}" "${mac:-'N/A'}" "${corporation:-'N/A'}" "${manufacturer:-'N/A'}" | color 33
            else
                printf "%-13s : %-31s : %-18s : %-13s : %-30s \n" "${full_ip:-'N/A'}" "${hostname:-'N/A'}" "${mac:-'N/A'}" "${corporation:-'N/A'}" "${manufacturer:-'N/A'}" | color 33
            fi
        fi
    } >> "$temp_file" 2>&1 &!
done
wait
while true; do
    sleep 5
    if (( counter >= end_ip ));then
        break 
    fi
done
sort -t . -k 3,3n -k 4,4n "$temp_file" | uniq 
rm "/tmp/oui-tmp.txt"
rm "$temp_file"
echo "Scan complete." | color 36